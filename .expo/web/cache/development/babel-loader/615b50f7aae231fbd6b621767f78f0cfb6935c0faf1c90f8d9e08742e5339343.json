{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport Constants, { ExecutionEnvironment } from 'expo-constants';\nimport { useMemo } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport function applyRequiredScopes() {\n  var scopes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var requiredScopes = arguments.length > 1 ? arguments[1] : undefined;\n  return _toConsumableArray(new Set([].concat(_toConsumableArray(scopes), _toConsumableArray(requiredScopes))));\n}\nexport function shouldUseProxy() {\n  return Platform.select({\n    web: false,\n    default: Constants.executionEnvironment === ExecutionEnvironment.StoreClient\n  });\n}\nexport function invariantClientId(idName, value, providerName) {\n  if (typeof value === 'undefined') throw new Error(\"Client Id property `\" + idName + \"` must be defined to use \" + providerName + \" auth on this platform.\");\n}\nexport function useProxyEnabled(redirectUriOptions) {\n  return useMemo(function () {\n    var _redirectUriOptions$u;\n    return (_redirectUriOptions$u = redirectUriOptions.useProxy) != null ? _redirectUriOptions$u : shouldUseProxy();\n  }, [redirectUriOptions.useProxy]);\n}","map":{"version":3,"names":["Constants","ExecutionEnvironment","useMemo","Platform","applyRequiredScopes","scopes","arguments","length","undefined","requiredScopes","_toConsumableArray","Set","concat","shouldUseProxy","select","web","default","executionEnvironment","StoreClient","invariantClientId","idName","value","providerName","Error","useProxyEnabled","redirectUriOptions","_redirectUriOptions$u","useProxy"],"sources":["E:\\a2b-app\\node_modules\\expo-auth-session\\src\\providers\\ProviderUtils.ts"],"sourcesContent":["import Constants, { ExecutionEnvironment } from 'expo-constants';\nimport { useMemo } from 'react';\nimport { Platform } from 'react-native';\n\nimport { AuthSessionRedirectUriOptions } from '../AuthSession';\n\nexport function applyRequiredScopes(scopes: string[] = [], requiredScopes: string[]): string[] {\n  // Add the required scopes for returning profile data.\n  // Remove duplicates\n  return [...new Set([...scopes, ...requiredScopes])];\n}\n\n// Only natively in the Expo client.\nexport function shouldUseProxy(): boolean {\n  return Platform.select({\n    web: false,\n    // Use the proxy in the Expo client.\n    default: Constants.executionEnvironment === ExecutionEnvironment.StoreClient,\n  });\n}\n\nexport function invariantClientId(idName: string, value: any, providerName: string) {\n  if (typeof value === 'undefined')\n    // TODO(Bacon): Add learn more\n    throw new Error(\n      `Client Id property \\`${idName}\\` must be defined to use ${providerName} auth on this platform.`\n    );\n}\n\nexport function useProxyEnabled(\n  redirectUriOptions: Pick<AuthSessionRedirectUriOptions, 'useProxy'>\n): boolean {\n  return useMemo(\n    () => redirectUriOptions.useProxy ?? shouldUseProxy(),\n    [redirectUriOptions.useProxy]\n  );\n}\n"],"mappings":";AAAA,OAAOA,SAAS,IAAIC,oBAAoB,QAAQ,gBAAgB;AAChE,SAASC,OAAO,QAAQ,OAAO;AAAC,OAAAC,QAAA;AAKhC,OAAM,SAAUC,mBAAmBA,CAAA,EAAgD;EAAA,IAA/CC,MAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAmB,EAAE;EAAA,IAAEG,cAAwB,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAGjF,OAAAE,kBAAA,CAAW,IAAIC,GAAG,IAAAC,MAAA,CAAAF,kBAAA,CAAKL,MAAM,GAAAK,kBAAA,CAAKD,cAAc,EAAC,CAAC;AACpD;AAGA,OAAM,SAAUI,cAAcA,CAAA;EAC5B,OAAOV,QAAQ,CAACW,MAAM,CAAC;IACrBC,GAAG,EAAE,KAAK;IAEVC,OAAO,EAAEhB,SAAS,CAACiB,oBAAoB,KAAKhB,oBAAoB,CAACiB;GAClE,CAAC;AACJ;AAEA,OAAM,SAAUC,iBAAiBA,CAACC,MAAc,EAAEC,KAAU,EAAEC,YAAoB;EAChF,IAAI,OAAOD,KAAK,KAAK,WAAW,EAE9B,MAAM,IAAIE,KAAK,0BACWH,MAAM,iCAA6BE,YAAY,4BAAyB,CACjG;AACL;AAEA,OAAM,SAAUE,eAAeA,CAC7BC,kBAAmE;EAEnE,OAAOvB,OAAO,CACZ;IAAA,IAAAwB,qBAAA;IAAA,QAAAA,qBAAA,GAAMD,kBAAkB,CAACE,QAAQ,YAAAD,qBAAA,GAAIb,cAAc,EAAE;EAAA,GACrD,CAACY,kBAAkB,CAACE,QAAQ,CAAC,CAC9B;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}